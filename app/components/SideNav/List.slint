import { Palette, HorizontalBox }  from "std-widgets.slint";
import { SideNavListItem, ListItem } from "ListItem.slint";
import { ViewManager, View } from "../../utils/view-manager.slint";

export component SideNavList inherits VerticalLayout {
    padding-top: 18px;
    private property <image> walletIcon: ViewManager.activeView == View.wallet ? @image-url("../../assets/icons/wallet-icon-filled.svg") :  @image-url("../../assets/icons/wallet-icon.svg");
    private property <image> collectionsIcon: ViewManager.activeView == View.collections ? @image-url("../../assets/icons/grid-icon-filled.svg") : @image-url("../../assets/icons/grid-icon.svg");
    private property <image> swapIcon: ViewManager.activeView == View.swap ? @image-url("../../assets/icons/swap-icon-filled.svg") : @image-url("../../assets/icons/swap-icon.svg");
    private property <image> explorerIcon: ViewManager.activeView == View.explore ? @image-url("../../assets/icons/globe-icon-filled.svg") : @image-url("../../assets/icons/globe-icon.svg");
    private property <image> settingsIcon: ViewManager.activeView == View.settings ? @image-url("../../assets/icons/settings-icon-filled.svg") : @image-url("../../assets/icons/settings-icon.svg");

    function labelSelector(view: View) -> string {
        if (view == View.wallet) {
            return "Wallet";
        } else if (view == View.collections) {
            return "Collections";
        } else if (view == View.swap) {
            return "Swap";
        } else if (view == View.explore) {
            return "Explore";
        } else if (view == View.settings) {
            return "Settings";
        } else {
            return "Unavailable";
        }
    }

    private property <[ListItem]> listItems: [
        {
            view: View.wallet,
            icon: walletIcon,
            label: labelSelector(View.wallet)
        },
        {
            view: View.collections,
            icon: collectionsIcon,
            label: labelSelector(View.collections)
        },
        {
            view: View.swap,
            icon: swapIcon,
            label: labelSelector(View.swap)
        },
        {
            view: View.explore,
            icon: explorerIcon,
            label: labelSelector(View.explore)
        },
        {
            view: View.settings,
            icon: settingsIcon,
            label: labelSelector(View.settings)
        },
    ];

    for item[index] in listItems: SideNavListItem { view: item.view; icon: item.icon; label: item.label; }

}